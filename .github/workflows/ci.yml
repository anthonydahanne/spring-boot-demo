# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "fix-220" ]


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    # that requires a self-hosted runner with tag "arm64" bound to this repo
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'liberica'
        cache: maven
    - name: Test and Build with Maven
      run: ./mvnw -B package --file pom.xml

    - name: Log in to the GH Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUBTOKEN }}

    - name: Test push
      run: |
        docker pull buildpacksio/lifecycle:0.16.0
        docker tag  buildpacksio/lifecycle:0.16.0 ${{ env.REGISTRY }}/${{ github.repository }}:fix220-test
        docker push ${{ env.REGISTRY }}/${{ github.repository }}:fix220-test

    - name: Create and publish native container image with spring maven plugin
      run: |
        ./mvnw -P native spring-boot:build-image \
          -Ddocker.publishRegistry.username=${{ github.actor }} \
          -Ddocker.publishRegistry.password=${{ secrets.GITHUBTOKEN }} \
          -Ddocker.publishRegistry.url=${{ env.REGISTRY }} \
          -Dspring-boot.build-image.publish=true \
          -Dspring-boot.build-image.imageName="${{ env.REGISTRY }}/${{ github.repository }}:fix220" \
          -DskipTests

    - name: Run fix 220 image and asserts application starts up properly
      run: |
        docker run --rm --name=spring-boot-demo-arm64-fix220 -d -p 8080:8080 ${{ env.REGISTRY }}/${{ github.repository }}:fix220
        sleep 5
        docker logs -f spring-boot-demo-arm64-jvm &> container.logs &
        
        counter=0
        while [ $counter -lt 10 ]
        do
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/actuator/health)
          if [ $response -eq 200 ]; then
            echo "HTTP 200 OK, app is started properly"
            echo "shutting down the app"
            response=$(curl -X POST -s -o /dev/null -w "%{http_code}" localhost:8080/actuator/shutdown)
            if [ $response -eq 200 ]; then
              echo "HTTP 200 OK, app shutting now"
            fi
            sleep 1
            cat container.logs
            exit 0
          fi
          counter=$((counter+1))
          sleep 1
        done
        echo "Request failed: HTTP $response, app was never ready"
        cat container.logs
        exit 1